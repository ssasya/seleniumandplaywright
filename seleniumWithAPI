#### 찰스 프록시 실행 중 실행 불가함!!! ####

import requests
import sys
from time import sleep
import random
import datetime
from dateutil.relativedelta import relativedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def wait_for(driver, by, locator, timeout=10):
    return WebDriverWait(driver, timeout).until(
        EC.presence_of_element_located((by, locator))
    )

def wait_for_clickable(driver, by, locator, timeout=10):
    return WebDriverWait(driver, timeout).until(
        EC.element_to_be_clickable((by, locator))
    )

############ 12변수 설정 - 직접 바꿔줘야함! ############

# 서버 선택
server = 'rc' # 서버 rc / rc2 / rc3

# 로그인 정보 입력
wadiz_Id = 'hoyul.lee+5@wadiz.kr' # 와디즈 이메일
wadiz_PW = 'wadiz12!@' # 와디즈 비밀번호
ADwadiz_Id = 'hoyul.lee@wadiz.kr' # 어드민 이메일
ADwadiz_PW = 'Wadiz12!@' # 어드민 비밀번호


# 오픈예정 신청 여부
comingSoon = False # 오픈예정 신청 시 True | 아닌 경우 False

# 스토어 개설 여부
store_setup = False # 스토어 생성 시 True | 아닌 경우 False

# 와배송 선택해서 작성
# 와배송 미신청 : False
# 와배송 상온 : "ROOM_TEMPERATURE" | 와배송 냉장냉동 : "LOW_TEMPERATURE"
WA_Delivery_type = False


# 요금제 선택
PlanType = 'PRO' # 요금제 BASIC / PRO / EXPERT

# 본인인증 휴대폰 번호 입력 (DB 쿼리로 인증함)
wadiz_phonenumber = '01074320593'

# 프로젝트 정보 > 프로젝트 타입 선택
campaignType= 'FUNDING' # FUNDING 펀딩 / PREORDER 프리오더 / GLOBAL 글로벌 / ENCORE 앵콜
pre_Condition = 'ONLY' # 필수조건 (국내단독(선정산) ONLY / 특별구성 SPECIAL / 한정판 LIMITED), 펀딩인 경우 그냥 두면 됨

# 19세 이상 구매 가능 선택
isAdult = False # True 19세 이상 구매 | False 19세 X


# 사업자 정보 입력 (개인사업자용 셋팅)
corpType = 'IB' # 개인사업자 IB / 법인사업자 CB / 개인 IV (개인선택한 경우 펀딩으로 고정됨)
wadiz_name = '이호율' # 대표자명
businessNumber = 2562560085 # 사업자번호
businessName = '호율+M1' #상호(법인명)

# 업로드할 이미지 위치 입력
file_path = '/Users/hoyul.lee/Desktop/짤/TEST.jpg'  # 이미지 파일 경로 

# 대표이미지 URL 입력 (찰스로 확인 가능)
ImageURL = "https://d3u2pup5couzhu.cloudfront.net/studio/images/2025/04/02/1cd7556e-23bf-4494-9035-37663272ff19.jpeg"

# 스토리 이미지  URL 입력 (찰스로 확인 가능)
photoUrl = "https://d3u2pup5couzhu.cloudfront.net/studio/images/2025/04/02/dcbb3ec8-3d7f-4a3e-9ece-90f902d90305.png"


# 리워드 3개 설정
rewardPrice = [10000, 30000, 100000] # 리워드 금액
rewardName = ['1번 리워드', '2번 리워드','3번 리워드'] # 리워드 명
rewardDescription = ['1번 리워드 설명','2번 리워드 설명','3번 리워드 설명'] # 리워드 설명
shippingPrice = 0 # 배송비

############################################################


if server == 'rc':
    host = "https://rc.wadiz.kr/web"
    host_adm = "https://rcadm.wadiz.kr/web"
    host_fstudio = "https://rc.wadiz.kr/studio"
    host_db = '192.168.0.218' 
    
elif server == 'rc2':
    host = "https://rc2.wadiz.kr/web"
    host_adm = "https://rc2adm.wadiz.kr/web"
    host_fstudio = "https://rc2.wadiz.kr/studio"
    host_db = '192.168.2.163'
else :
    host = "https://rc3.wadiz.kr/web"
    host_adm = "https://rc3adm.wadiz.kr/web"
    host_fstudio = "https://rc3.wadiz.kr/studio"
    host_db = '192.168.130.101'

# 펀딩/프리오더에 따라 campaignType 자동 변경


# 스토어 생성 시 
if store_setup :
    comingSoon = False  # 오픈예정 없음으로 고정
    corpType = 'IB' # 개인사업자 고정

# 개인 선택한 경우 펀딩으로 자동 변경
if corpType == 'IV':
    campaignType = "FUNDING"


# 와디즈 이메일 앞부분만 가져오기    
email_name = wadiz_Id.split('@')[0]

## 카테고리 랜덤하게 선택하게 하는 변수 ################################################################
a11_categoryCodes = [
    'A0010', 'B0010', 'B0020', 'B0030', 'B0040', 'B0050', 'B0060', 'B0070', 'B0080', 'B0090',
    'A0020', 'B0100', 'B0110', 'B0120', 'B0130', 'B0140', 'B0150', 'B0160', 'B0170', 'B0180',
    'A0030', 'B0190', 'B0200', 'B0210', 'B0220', 'B0230', 'B0240', 'B0250', 'B0260', 'B0270', 'B0280', 'B0290', 'B0300', 'B0310', 'B0320',
    'A0040', 'B0330', 'B0340', 'B0350', 'B0360', 'B0370', 'B0380', 'B0390', 'B0400', 'B0410',
    'A0050', 'B0420', 'B0430', 'B0440', 'B0450', 'B0460', 'B0470', 'B0480', 'B0490', 'B0500', 'B0510',
    'A0060', 'B0520', 'B0530', 'B0540', 'B0550', 'B0560', 'B0570', 'B0580', 'B0590', 'B0600', 'B0610', 'B0620', 'B0630',
    'A0080', 'B0730', 'B0740', 'B0750', 'B0760', 'B0770', 'B0780',
    'A0090', 'B0790', 'B0800', 'B0810', 'B0820', 'B0830', 'B0840',
    'A0100', 'B0850', 'B0860', 'B0870', 'B0880',
    'A0110', 'B0890', 'B0900', 'B0910', 'B0920', 'B0930',
    'A0120', 'B0940', 'B0950', 'B0960', 'B0970', 'B0980', 'B0990', 'B1000',
    'A0140', 'B1070', 'B1080', 'B1090', 'B1100', 'B1110', 'B1120',
    'A0130', 'B1010', 'B1020', 'B1030', 'B1040', 'B1050', 'B1060',
    'A0170', 'B1180', 'B1190', 'B1200', 'B1210',
    'A0150', 'B1130', 'B1140',
    'A0160', 'B1150', 'B1160', 'B1170',
    'A0180', 'B1220', 'B1230', 'B1240',
    'A0190', 'B1250', 'B1260', 'B1270', 'B1280', 'B1290',
    'A0200', 'B1300', 'B1310', 'B1320', 'B1330', 'B1340', 'B1350',
    'A0210', 'A0220', 'B1360', 'B1370'
]
## 'A0070', 'B0640', 'B0650', 'B0660', 'B0670', 'B0680', 'B0690', 'B0700', 'B0710', 'B0720' 출판 제외
## B1380 후원 제외
categoryCode = random.choice(a11_categoryCodes)
subcategoryCode = random.choice(a11_categoryCodes) # 서브카테고리


# 카테고리 코드 동일할 경우 재설정
while categoryCode == subcategoryCode :
    subcategoryCode = random.choice(a11_categoryCodes)

####################################################################################################

def handle_response(response, success_message, failure_message):
    if response.status_code == 200:
        print(success_message)
    else:
        print(failure_message)


# WebDriver 설정 (Chrome)
options = webdriver.ChromeOptions()
options.add_argument("--disable-blink-features=AutomationControlled")  # 자동화 탐지 방지
# options.add_argument("--headless")  # ✅ Headless 모드 추가
options.add_argument("--disable-dev-shm-usage")  # 리소스 제한 문제 방지
driver = webdriver.Chrome(options=options)
try:
    print(">> ChromeDriver 실행 중..")

    # 로그인 페이지 열기
    wait = WebDriverWait(driver, 10)
    driver.get(f"{host}/main")
    time.sleep(3)  # 페이지 로딩 대기
    print(">> 와디즈 페이지 진입 (",driver.current_url,")")
    
    if server == 'rc':
          global_button = wait.until(EC.element_to_be_clickable((By.CLASS_NAME, "CountryChangeButton-module_container__cf3d9")))
          global_button.click()
          time.sleep(2)
          first_item = driver.find_element(By.CSS_SELECTOR,"li.CountryListSection-module_item__90428")
          first_item.click()
          save_button = driver.find_element(By.XPATH, "//button[.//span[text()='Save']]")
          save_button.click()
          time.sleep(5)
          print(">> 국가 변경 완료")
    
    # 로그인 버튼 클릭
    login_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[text()='로그인']")))
    login_button.click()
    time.sleep(2)
    print(">> 로그인 페이지 진입")

    # 로그인 정보 입력
    driver.find_element(By.NAME, "username").send_keys(wadiz_Id)
    driver.find_element(By.NAME, "password").send_keys(wadiz_PW)

    # 로그인 버튼 클릭
    driver.find_element(By.CSS_SELECTOR, '[data-test-id="loginSubmitButton"]').click()
    time.sleep(2)  # 로그인 처리 대기
    print(">> 로그인 처리 대기 중..")

    # 로그인 후 쿠키 가져오기
    cookies = driver.get_cookies()
#    print("로그인 후 쿠키:", cookies)

    # 쿠키를 requests 세션에 적용
    session = requests.Session()
    for cookie in cookies:
        session.cookies.set(cookie['name'], cookie['value'])

# print("세션 쿠키 설정 완료!")
finally:
    print(">> 로그인 후 WebDriver 실행중..")
    # driver.quit()  # WebDriver 종료

session_info = session.cookies.get_dict()
# ✅ `requests`로 로그인 세션 유지하면서 API 호출하기
login_check_url = f"{host}/account/isLoggedIn"
response = session.get(login_check_url)
print(">> 로그인 완료!")

# ============ 1. 프로젝트 개설============ #
url = f"{host}/reward/api/studios"
data = {
    "makerName": "테스트",
    "categoryId": None,
    "corpType": None
}
response = requests.post(url, json=data, cookies=session_info) 

if response.status_code == 200: # 개설 완료 시 campaignId 가져오기
    json_data = response.json()
    campaignId = json_data.get('data', {}).get('campaignId')  # 응답 데이터에서 campaignId 추출
    print(">> 메이커 스튜디오 개설 :", campaignId)
else :
    print("메이커 스튜디오 개설 요청 실패") # 개설 실패시 메시지 띄움
    print(response.text)

#### 1-2. 프로젝트 개설 > 리워드 메이커 스튜디오 인트로 진행 상태 변경 ####
url = f"{host}/reward/api/studios/campaigns/{campaignId}/pass-intro"

data = {
"categoryId": categoryCode,
"isAdultContent": False
}
response = requests.post(url, json=data, cookies=session_info)
handle_response(response, "   인트로 다음으로", "프로젝트 인트로 다음으로 진행 실패")


#### 1-3. 서비스 이용 동의 ###
url = f"{host}/reward/api/makers/campaigns/{campaignId}/agreements/types/MAKER_INFO_COLLECT_AGREE"
response = requests.post(url, cookies=session_info)
handle_response(response, "   서비스 이용동의 완료", "서비스 이용 동의 실패")

# ============ 2. 요금제 선택 ============ #
url = f"{host}/reward/api/studios/campaigns/{campaignId}/sections/plan"

if PlanType == 'EXPERT' : # expert 요금제 선택
    data = {
    "isTemporary": False,
    "packagePlanType": "EXPERT",
    "questionAnswers": [{
        "answer": "Expert 요금제 시켜주세요",
        "questionNo": 1
        }]
    }
else :
    data = {
        "isTemporary": False,
        "packagePlanType": f"{PlanType}" 
    }

response = requests.post(url, json=data, cookies=session_info)
handle_response(response, f">> {PlanType} 요금제 선택 완료", "요금제 선택 실패")


# ============ 3. 프로젝트 정보 ============ #
    
#### === 3-1. 사업자에 따라 이미지 업로드 ===== ###

# >> 개인일때 신분증 업로드 === # 
if corpType == "IV":
    url = f'{host}/reward/api/screenings/campaigns/{campaignId}/requirements/files/COPY_OF_IDENTIFICATION_CARD'  # 파일을 업로드할 URL

    with open(file_path, 'rb') as file: # 파일 열기
        files = {'file': file}
        response = requests.post(url, files=files, cookies=session_info)    # 파일을 함께 업로드하여 POST 요청 보내기

    if response.status_code == 200:
        json_data = response.json()
        copyOfIdentiCardEncUpdateSeq = str(json_data.get('data', {}).get('encUploadSeq')) # 응답 데이터에서 encUploadSeq 값 추출
    else :
        print("프로젝트 정보 > 신분증 업로드 실패")

# >> 개인사업자/법인사업자 사업자등록증 업로드 #
url = f'{host}/reward/api/screenings/campaigns/{campaignId}/requirements/files/BUSINESS_LICENSE'  # 파일을 업로드할 URL

with open(file_path, 'rb') as file: # 파일 열기
    files = {'file': file}
    response = requests.post(url, files=files, cookies=session_info)    # 파일을 함께 업로드하여 POST 요청 보내기

if response.status_code == 200:
    json_data = response.json()
    encUploadSeq = str(json_data.get('data', {}).get('encUploadSeq')) # 응답 데이터에서 encUploadSeq 값 추출
else :
    print("프로젝트 정보 > 사업자 등록증 업로드 실패")



if campaignType == 'FUNDING':
    pass
else :
# 통신판매업 신고서류 업로드
    url = f'{host}/reward/api/screenings/campaigns/{campaignId}/requirements/files/MAIL_ORDER_BUSINESS_REPORT'
    with open(file_path, 'rb') as file:
        files = {'file': file}
        response = requests.post(url, files=files, cookies=session_info) # 파일을 함께 업로드하여 POST 요청 보내기
        
    if response.status_code == 200:
        json_data = response.json()
        orderimage_encUploadSeq = str(json_data.get('data', {}).get('encUploadSeq'))  # 응답 데이터에서 encUploadSeq 추출
    else :
        print("프로젝트 정보 > 통신 판매업 업로드 실패")


#### 3-3. 프로젝트 정보 저장 ####
url = f'{host}/reward/api/studios/campaigns/{campaignId}/sections/requirement'


# 펀딩 / 프리오더 값 다르게 들어가서 분기처리
# 펀딩일때
if campaignType == 'FUNDING': 
    campaignBizModel = 'FUNDING' 
    pre_Condition = None
    orderBisiNum = None # 통신판매업 신고 번호
    orderimage_encUploadSeq = None # 통신 판매업 신고 서류
    productionType_code = '2P01' # 심사서류 
    screeningRewardItemNo = 7678
    RequirementAgrees = {
            "NEVER_SOLD": True,
            "SOLD_ON_WADIZ": True}
   # 펀딩 - 개인일때
    if corpType == "IV" :
        businessNumber = None
        businessName = None
        encUploadSeq = None
        openingDate = None
   # 펀딩 - 개인/법인사업자일때
    else :
        copyOfIdentiCardEncUpdateSeq = None # 신분증 업로드 None
        openingDate = '20190429'

# 프리오더 일때
else: 
    campaignBizModel = 'PREORDER'
    openingDate = '20190429'
    orderBisiNum = '2021-성남분당-1234' # 통신 판매업 신고 번호
    productionType_code = None # 심사서류
    screeningRewardItemNo = 7496
    copyOfIdentiCardEncUpdateSeq = None # 신분증
    
    if pre_Condition == "ONLY": # 국내단독
        RequirementAgrees = {
            "SOLD_ON_WADIZ_ONLY": True
        }
    elif pre_Condition == "SPECIAL": #특별구성
        RequirementAgrees = {
            "SPECIAL_SOLD_ON_OTHER_CHANNEL": True,
            "SOLD_ON_WADIZ_EXCLUSIVE": True
        }
    else:
        RequirementAgrees = { #한정판
            "LIMITED_SOLD_ON_OTHER_CHANNEL": True,
            "NO_ADDITIONAL_PRODUCTION_PLANNED": True
        }
    
data = {
    "campaignId": campaignId,
    "currentScreeningVersion": 2,
    "subCategoryId": None,
    "classification": campaignType, 
    "campaignBizModel": campaignBizModel,
    "preOrderCondition": pre_Condition,
    "campaignFeature": "국내에서 오직 와디즈만 뿅뿅 가방을 만나볼 수 있어요",
    "corpType": corpType,
    "copyOfIdentificationCardEncUpdateSeq": copyOfIdentiCardEncUpdateSeq, # 신분증
    "businessNumber": businessNumber,
    "businessName": businessName,
    "businessLicenseEncUpdateSeq": encUploadSeq,
    "openingDate": openingDate,
    "isBusinessLicenseVerified": True,
    "corpSealCertificateEncUpdateSeq": None,
    "mailOrderBusinessReportNumber": orderBisiNum, 
    "mailOrderBusinessReportUpdateSeq": orderimage_encUploadSeq,
    "targetAmount": 500000,
    "isTemporary": False,
    "screeningRewardItems": [{
        "screeningRewardItemNo": "",
        "categoryCode": "914",
        "productionTypeCode": productionType_code,
        "isSimpleDistributor": False,
        "emailSendStage": None,
        "notUploadType": "UNNECESSARY",
        "encUploadSeqs": [],
        "kcItems": [],
        "screeningVersion": 2,
        "copiedScreeningRewardItem": False
        }],
        "copiedBy": None,
        "copiedCampaign": False,
        "representative": {
            "email": wadiz_Id,
            "name": wadiz_name

        },
        "invoiceRecipient": wadiz_Id,
        "coRepresentatives": [],
        "categories": [{
            "categoryCode": categoryCode,
            "isPrime": True,
            "orderNo": 1
        }, {
            "categoryCode": subcategoryCode,
            "isPrime": False,
            "orderNo": 2
        }], "isAdultContent": isAdult,
        "rewardRequirementAgrees": RequirementAgrees
}

response = requests.post(url, json=data, cookies=session_info)
handle_response(response, f">> 프로젝트 정보 저장완료", "프로젝트 정보 저장 실패")


# ============ 5. 스토리 작성 ============ #

# 5.1 스토리 작성 > 정책 동의 ###
url = f'{host}/reward/api/makers/campaigns/{campaignId}/agreements/types/STORY_AD_CONSIDER_AGREE'
response = requests.post(url, cookies=session_info)
handle_response(response, f"   스토리 작성 > 이용 동의 성공", "스토리 작성 > 이용 동의 실패")

# 5.2 스토리 작성 > 작성 완료 ###
url = f'{host}/reward/api/studios/campaigns/{campaignId}/sections/story'

BasicInfoTag = 'Test' #검색태그

if store_setup :
    title = f"[{campaignId}] {email_name} 스토어 오픈했따!!!!"    
else:
    if comingSoon:
        if campaignType == 'FUNDING' :
            title = f"[{campaignId}] HY_펀딩 오픈예정요"
        else :
            title = f"[{campaignId}] HY_프리오더 오픈예정요"
    else:
        if campaignType == 'FUNDING':
            title = f"[{campaignId}] HY_펀딩 프로젝트"
        else :
            title = f"[{campaignId}] HY_프리오더 프로젝트"

if comingSoon:
    data = {
        "campaignStory": "<h3>안녕하세요. 스토리 작성을 시작한 메이커님을 환영해요!</h3>",
        "comingSoonStory": "<p>오픈예정 프로젝트 입니다!!!!!</p>",
        "coreMessage": "편안한 구름베개는 100% 솜으로 만들어져 푹신하고 가벼우며 위생적이며 잠을 편안하게 해줍니다.",
        "images": [{
            "orderNo": 0,
            "photoUrl": photoUrl
        }],
        
        "isAppliedComingSoon": True,
        "isTemporary": False,
        "videoUrl": None,
        "representativeEncPhotoId" : None,
        "photoUrl": ImageURL,
        "title": title,
        "tags": [{
            "tag": BasicInfoTag,
            "orderNo": 1
        }]
    }
else : 
    data = {
        "campaignStory": "<h3>안녕하세요. 스토리 작성을 시작한 메이커님을 환영해요!</h3>",
        "comingSoonStory": "오픈예정 미진행",
        "coreMessage": "편안한 구름베개는 100% 솜으로 만들어져 푹신하고 가벼우며 위생적이며 잠을 편안하게 해줍니다.",
        "images": [{
            "orderNo": 0,
            "photoUrl": photoUrl
        }],
        
        "isAppliedComingSoon": False,
        "isTemporary": False,
        "videoUrl": None,
        "representativeEncPhotoId" : None,
        "photoUrl": ImageURL,
        "title": title,
        "tags": [{
            "tag": BasicInfoTag,
            "orderNo": 1
        }]
    }

response = requests.post(url, json=data, cookies=session_info)
handle_response(response, f">> 스토리 작성 성공", "스토리 작성 실패")

###########################################################################################
######################============ 6. 리워드 설계(Selenium) ============#####################
###########################################################################################

try: 
    driver.get(f"{host_fstudio}/reward/{campaignId}/funding/condition")
    
    # 가이드 dim 제거
    WebDriverWait(driver, 10).until(
    EC.presence_of_element_located((By.ID, "AppLayout_Container"))
    )
    driver.find_element(By.ID, "AppLayout_Container").click()
    
    # 리워드 추가 버튼 선택
    rewardAddButtonWadiz = wait_for(driver,By.XPATH,"//*[contains(@class, 'RewardEmptyButton_content')]")
    rewardAddButtonWadiz.click()
    time.sleep(2)
    
    dropdownsButoon = wait_for(driver,By.CLASS_NAME,"select-menu__control")
    
    # 모든 드롭다운 요소 가져오기
    dropdowns = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, "select-menu__control"))
    )
    dropdowns[0].click()

    # 첫 번째 드롭다운 단일 구성 설정
    option = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'select-menu__option') and text()='단일 구성']"))
    )
    option.click()

    # 두 번째 드롭다운을 선택하기 위해 모든 드롭다운 요소 다시 가져오기
    dropdowns = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.CLASS_NAME, "select-menu__control"))
    )
    dropdowns[1].click()

    # 두 번째 드롭다운 옵션 없음 설정
    option = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//div[contains(@class, 'select-menu__option') and text()='옵션 없음']"))
    )
    option.click()

    # 배송 유형 선택
    label = driver.find_element(By.XPATH, "//label[.//span[text()='전 세계 배송']]")
    radio = label.find_element(By.TAG_NAME, "input")
    driver.execute_script("arguments[0].click();", radio)

    # 국가 선택 드롭다운 열기
    driver.find_element(By.XPATH, "//button[span[text()='국가를 선택해주세요.']]").click()

    # "전 세계" 체크박스 라벨을 기준으로 input 요소 찾기
    checkbox_label = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((
            By.XPATH,"//label[.//span[text()='전 세계']]")))

    # 해당 라벨 내의 input 요소 클릭
    checkbox_input = checkbox_label.find_element(By.TAG_NAME, "input")
    driver.execute_script("arguments[0].click();", checkbox_input)

    # 국가 선택 드롭다운 닫기
    driver.find_element(By.XPATH, "//button[span[text()='전 세계']]").click()

    # 모든 TextField_field__ODhhN 요소가 로드될 때까지 대기
    # 모든 필드 로딩될 때까지 대기
    WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.XPATH, "//*[contains(@class, 'TextField_field')]"))
    )

    # visible한 input/textarea만 필터링
    inputs = []
    fields = driver.find_elements(By.XPATH, "//*[contains(@class, 'TextField_field')]")
    for field in fields:
        try:
            element = field.find_element(By.TAG_NAME, "input")
            if element.is_displayed():
                inputs.append(element)
        except:
            try:
                element = field.find_element(By.TAG_NAME, "textarea")
                if element.is_displayed():
                    inputs.append(element)
            except:
                continue

    # 입력값
    input_values = [
        "1000",              # 금액
        "천원짜리 리워드",       # 리워드명
        "천원짜리 리워드 입니다.", # 설명
        "9999",              # 제한 수량
        "3000"               # 국가 별 배송비
    ]

    # 입력 수행
    for i in range(min(len(inputs), len(input_values))):
        inputs[i].clear()
        inputs[i].send_keys(input_values[i])

    # 저장버튼 선택
    driver.find_element(By.XPATH, "//button[.//span[text()='저장']]").click()
    time.sleep(4)

    driver.find_element(By.XPATH,"//button[.//span[text()='저장']]").click()

finally:
        print(">> 리워드 설계 종료")

# ============ 7. 정책 ============ #
url = f'{host}/reward/api/studios/campaigns/{campaignId}/sections/risk-policy'
data = {
    "noRefundCase": None,
    "returnExchangePolicy": None,
    "rewardItemInformationNotices": [{
        "category": {
            "categoryName": "기타 재화",
            "categoryId": "RPC37"
        },
        "orderNo": 1,
        "descriptions": [{
            "item": {
                "itemNo": 336,
                "itemName": "품명 및 모델명",
                "guide": ""
            },
            "description": "TN-5000 보풀제거기"
        }, {
            "item": {
                "itemNo": 337,
                "itemName": "법에 의한 인증・허가 등을 받았음을 확인할 수 있는 경우 그에 대한 사항",
                "guide": ""
            },
            "description": "[방송통신기자재]적합등록_ R-R-tbo-TN-5000, [전기용품]안전확인_YU102629-21003A"
        }, {
            "item": {
                "itemNo": 338,
                "itemName": "제조국 또는 원산지",
                "guide": ""
            },
            "description": "대한민국"
        }, {
            "item": {
                "itemNo": 339,
                "itemName": "제조자, 수입품의 경우 수입자를 함께 표기",
                "guide": ""
            },
            "description": "와디즈 QA 테스트 입니다"
        }, {
            "item": {
                "itemNo": 340,
                "itemName": "A/S 책임자와 전화번호 또는 소비자상담 관련 전화번호",
                "guide": "담당자 이름 표기가 어려울 경우, 업체명 입력"
            },
            "description": "얍얍얍얍얍얍"
        }]
    }],
    "isTemporary": False
}
response = requests.post(url, json=data, cookies=session_info)
handle_response(response, ">> 정책 저장 완료", "정책 저장 실패")

# ============ 8. db 쿼리로 대표자 인증 ============ #
import pymysql
conn = pymysql.connect(
        host = host_db,
        port = 3306, 
        user= 'hoyul.lee', # id 변수로 받아서 넣어주기
        password = 'Ch@ng3PW', # pw 변수로 받아서 넣어주기
        db='wadiz_db',
        charset='utf8')
cursor = conn.cursor(pymysql.cursors.DictCursor)


sql1 = f"""update CampaignContractRepresentative
            set PhoneNumber = '{wadiz_phonenumber}', IsVerified = True
            where CampaignId = {campaignId};"""
cursor.execute(sql1)
conn.commit()
print(">> DB 대표자 휴대폰 인증 완료")


# ============ 9. 메이커 정보 ============ #
# 9.1 메이커정보 > 대표 이미지 등록
url = f'{host}/reward/api/studios/campaigns/{campaignId}/images'


with open(file_path, 'rb') as file:
    files = {'file': file}
    response = requests.post(url, files=files, cookies=session_info)

if response.status_code == 200:
    json_data = response.json()
    Maker_encPhotoId = str(json_data.get('data', {}).get('encPhotoId')) 
    Maker_photoUrl = str(json_data.get('data', {}).get('photoUrl')) 

else :
    print("메이커 정보 > 이미지 등록 실패")

# 9.2 메이커 정보 작성 완료
url = f'{host}/reward/api/studios/campaigns/{campaignId}/sections/maker-info'
data = {
    "makerName": email_name,
     "globalMakerName" : email_name,
    "profileImageEncPhotoId": Maker_encPhotoId,
    "photoUrl": Maker_photoUrl,
    "memberEmails": [],
    "contactEmail": "qa_test@test.com",
    "contactPhoneNumber": wadiz_phonenumber,
    "websiteAUrl": "",
    "websiteBUrl": "",
    "facebookUrl": None,
    "instagramUrl": None,
    "twitterUrl": None,
    "kakaoSearchId": "",
    "kakaoHomeUrl": "",
    "isTemporary": False,
    "contactByCountries": [{
        "countryCode" : "KR",
        "displayOrder": 0,
        "hostCallNum": wadiz_phonenumber
        }]
}
response = requests.post(url, json=data, cookies=session_info)
handle_response(response, ">> 메이커 정보 저장 완료", "메이커 정보 저장 실패")

# 제출모달 > 서비스 이용 동의
url = f"{host}/reward/api/makers/campaigns/{campaignId}/agreements/types/MAKER_SERVICE_USE_AGREE"
response = requests.post(url, cookies=session_info)

if response.status_code == 200:
    pass
else :
    print("")
    
handle_response(response, "   제출모달 > 서비스 이용 동의 성공", "제출모달 > 서비스 이용 동의 실패")

# ============ 9. 제출하기 ============ #
url = f"{host}/reward/api/studios/campaigns/{campaignId}/submit"
data = {
    "isAuthenticationRequired": True
}

response = requests.post(url, json=data, cookies=session_info)
handle_response(response, f">> {campaignId} 프로젝트 제출 완료", f"{campaignId} 프로젝트 제출 실패")

# ============ 10. 어드민 심사하기 ============ #
# 어드민 로그인
login_url_adm = f"https://{server}adm.wadiz.kr/j_spring_security_check"
login_data_admin = {
    'j_username': 'hanna.lee@wadiz.kr',
    'j_password': 'qwer!@34'
}

# 세션 생성
with requests.Session() as session:
    # 로그인 요청
    login_response = session.post(login_url_adm, data=login_data_admin)

    # 로그인이 성공한 경우
    if login_response.status_code == 200:
        print(">> 어드민 로그인 성공")
        
        # 어드민 세션 가져오기
        campaign_url = f"{host_adm}/progress/ajaxGetCampaignTag/"
        campaign_data = {
            'tagType': 'ADM_HASH',
            'campaignId': 25610
        }
        campaign_response = session.post(campaign_url, data=campaign_data)
        if PlanType == 'EXPERT':
            # 담당부서
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/departments"
            data = {
                'type': 'PD',
                'department': 'QA'
            }
            response = session.post(url, data=data)
            
            # PD 담당자
            url = f"{host}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = 	{
                'type': 'PD',
                'manager': 'QA'
            }
            response = session.post(url, data=data)
            
            # SD 담당자
            url = f"{host}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = 	{
                'type': 'SD',
                'manager': 'QA'
            }
            response = session.post(url, data=data)
            
            # 스크리닝 진행
            url = f"{host}/reward/api/pd-screenings/campaigns/{campaignId}/events/PD_APPROVAL"
            data = {
                "reason": "",
                "sendEmail": False,
                "sendSms": False,
                "sender": ""
            }
            response = session.post(url, data=data)
            
            # 미팅진행
            url = f"{host}/reward/api/pd-consultings/{campaignId}/meetings"
            data = {
                "status": "MEETING_COMPLETED"
            }
            response = session.put(url, data=data)
            
        elif PlanType == 'PRO':
        # PM 심사 PRO
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = {
                "type":"PROJECT_PRO_SALES",
                "manager":"이호율",
                "employeeCode":"211162",
                "department":"QA",
                "departmentCode":"06001"
            }
            response = session.post(url, json=data)
        
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = {
            "type":"PROJECT_MANAGER",
            "manager":"이호율",
            "employeeCode":"211162",
            "department":"QA",
            "departmentCode":"06001"
            }
            response = session.post(url, json=data)
            print(">>",PlanType,"PM 지정 완료")
        else:
            # PM 심사 PRO
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = {
                "type":"PROJECT_BASIC_SALES",
                "manager":"이호율",
                "employeeCode":"211162",
                "department":"QA",
                "departmentCode":"06001"
            }
            response = session.post(url, json=data)
        
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
            data = {
                "type":"PROJECT_MANAGER",
                "manager":"이호율",
                "employeeCode":"211162",
                "department":"QA",
                "departmentCode":"06001"
            }
            response = session.post(url, json=data)
            print(">>",PlanType,"PM 지정 완료")
        

        # 1차 심사 매니저 지정  
        url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
        data = {
            "type":"PROJECT",
            "manager":"이호율",
            "employeeCode":"211162",
            "department":"QA",
            "departmentCode":"06001"
        }
        response = session.post(url, json=data)

        # 1차 심사 시작
        url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/events/BEGINNING_PROJECT_SCREENING"
        data = {
            "reason": "",
            "sendEmail": False,
            "sendSms": False,
            "sender": ""
        }
        response = session.post(url, json=data)

        # 1차 심사 승인
        url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/events/PROJECT_APPROVAL"
        data = {
            "reason": "",
            "sendEmail": False,
            "sendSms": False,
            "sender": ""
        }
        response = session.post(url, json=data) 
        print(">> 1차 심사 완료")
        
        # 2차 심사 매니저 지정  
        url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/managers"
        data = {
            'type': 'STORY',
            'manager': 'QA'
        }
        response = session.post(url, json=data)

        # 2차 심사 시작
        url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/events/BEGINNING_STORY_SCREENING"
        data = {
            "reason": "",
            "sendEmail": False,
            "sendSms": False,
            "sender": ""
        }
        response = session.post(url, json=data)

        # 2차 심사 승인
        if comingSoon:
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/events/COMING_SOON_STORY_APPROVAL"
            data = {
                "reason": "",
                "sendEmail": False,
                "sendSms": False,
                "sender": ""
            }
            response = session.post(url, json=data)
            if response.status_code == 200:
                print(">> 오픈예정 2차 심사 완료")
            else : 
                print("오픈예정 2차 심사 실패",response.text)
        else :
            url = f"{host_adm}/reward/api/screenings/campaigns/{campaignId}/events/STORY_APPROVAL"
            data = {
                "reason": "",
                "sendEmail": False,
                "sendSms": False,
                "sender": ""
            }
            response = session.post(url, json=data)
            print(">> 2차 심사 결과 완료")

    else:
        print("Admin 로그인 실패")
        

# ============ 11. 정산정보 입력 ============ #

# 11-1. 통장사본 업로드
url = f"https://{server}.wadiz.kr/web/reward/api/settlements/campaigns/{campaignId}/contractors/files?documentType=COPY_OF_BANKBOOK"

with open(file_path, 'rb') as file: # 파일 열기
    files = {'file': file}
    response = requests.post(url, files=files, cookies=session_info)

if response.status_code == 200:
    json_data = response.json()
    print(">> 통장사본 업로드 성공")
    encUploadSeq = str(json_data.get('data', {}).get('encUploadSeq')) # 응답 데이터에서 encUploadSeq 값 추출
else :
    print("통장사본 업로드 실패")

# 11- 2.정산 정보 입력
if corpType == "IV":
     residentRegistrationNumber = '9001011111111'
else :
     residentRegistrationNumber = None
url = f"https://{server}.wadiz.kr/web/reward/api/studios/campaigns/{campaignId}/sections/contract-info"
data = {
    "bankAccount": {
        "accountHolder": "남홍차",
        "accountNumber": "01228602013794",
        "bankCode": "071",
        "isMatchesAccountHolderName": True
    },
    "invoiceRecipient": "testQA@wadiz.kr",
    "copyOfBankbookEncUpdateSeq": encUploadSeq,
    "residentRegistrationNumber": residentRegistrationNumber
}
response = requests.post(url, json=data, cookies=session_info) # 쿠키 포함
if response.status_code == 200:
    print(">> 정산 정보 입력 완료")
else:
    print("정산 정보 입력 실패")

# ============ 12. 프로젝트 공개 ============ #

driver.get(f'{host_fstudio}/reward/{campaignId}/schedule')

modalButton = wait_for_clickable(driver,By.XPATH,"//button[.//span[text()='일정 설정 시작하기']]")
modalButton.click()

first_input = driver.find_element(By.XPATH,"(//div[contains(@class, 'TextField_field__')]/input[@placeholder='일자를 선택해 주세요'])[1]")
first_input.click()
time.sleep(1)

today_date = datetime.datetime.now()
weekday_map = {
    "Monday": "월요일",
    "Tuesday": "화요일",
    "Wednesday": "수요일",
    "Thursday": "목요일",
    "Friday": "금요일",
    "Saturday": "토요일",
    "Sunday": "일요일",
}
weekday_kr = weekday_map[today_date.strftime("%A")]
today_str = today_date.strftime(f"%Y년 %-m월 %-d일 {weekday_kr}")  # 맥/Linux
# today_str = today_date.strftime(f"%Y년 %#m월 %#d일 {weekday_kr}")  # 윈도우

xpath = f"//div[@aria-label='선택 {today_str}']"

# element를 찾고 → 다시 한 번 찾아서 click (StaleElement 대비)
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, xpath)))
element = WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, xpath)))
element.click()
time.sleep(5)
# # 프로젝트 공개 날짜 선택
# today = datetime.datetime.now().strftime("%Y년 %-m월 %-d일 %A")
# weekday_map = {
#     "Monday": "월요일",
#     "Tuesday": "화요일",
#     "Wednesday": "수요일",
#     "Thursday": "목요일",
#     "Friday": "금요일",
#     "Saturday": "토요일",
#     "Sunday": "일요일",
# }
# weekday_kr = weekday_map[datetime.datetime.now().strftime("%A")]

# today_kr = datetime.datetime.now().strftime("%Y년 %-m월 %-d일") + f" {weekday_kr}"
# print(f"[DEBUG] aria-label = 선택 {today_kr}")
# print(today)

# todayXpath = f"//div[@aria-label='선택 {today}']"

# date_element = WebDriverWait(driver, 10).until(
#     EC.element_to_be_clickable((By.XPATH, todayXpath))
# )
# date_element.click()

timeSelectButton = wait_for_clickable(driver,By.XPATH,"//button[.//span[text()='시간 선택하기']]")
timeSelectButton.click()

driver.find_element(By.CLASS_NAME('Checkbox_content')).click()

timeSelectButton_modal = driver.find_element(By.XPATH, "(//span[normalize-space()='시간 선택하기'])[2]/ancestor::button")
timeSelectButton_modal.click()

##########################################################################################
##################################### 수정필요 #############################################
##########################################################################################


# 여기서 부터는 스토어
if store_setup : 
    # 프로젝트 종료일 변경
    sql2 = f"""UPDATE Campaign SET WhenHoldTo = '2024-05-04 00:00:00'
    WHERE CampaignId = {campaignId};"""
    cursor.execute(sql2)
    conn.commit()
    print(">> DB 종료일 변경")

    # 스토어 프리패스
    sql3 = f"""INSERT INTO wadiz_store.entry_condition_bypass_funding (campaign_id, registered_by, registered_at, memo)
                SELECT c.CampaignId, c.UserId, NOW(), 'QA automation'
                FROM Campaign c WHERE c.CampaignId = {campaignId};"""
    cursor.execute(sql3)
    conn.commit()
    print(">> DB 스토어 프리패스 등록")
    
    # ============ 12. 스토어 프로젝트 개설 ============ #

    url = f"{host}/apip/store/studio/projects/set-up"
    data = {
        'campaignId' : campaignId
    }
    response = requests.post(url, data=data, cookies=session_info)

    if response.status_code == 200:
        json_data = response.json()
        projectNo = json_data.get('data', {}).get('projectNo')  # 응답 데이터에서 campaignId 추출
        print(">> 스토어 개설 완료 :", projectNo)
        
        # ============ 와디즈 어드민 계정으로 로그인 ============ #
        login_data = {
            'userName': ADwadiz_Id,
            'password': ADwadiz_PW
        }

        login_url = f"{host}/waccount/ajaxLoginProcess"
        login_response = requests.post(login_url, data=login_data)

        if login_response.status_code == 200:
            login_code = login_response.json().get('code')
            if login_code == 'SUSS000':				
                session_info_adstore = login_response.cookies  # 세션 정보 쿠키로 받음
            else :
                print("어드민 계정으로 로그인 실패(스토어)")
                sys.exit() # 로그인 실패하면 종료...
                
        else:
            print("로그인 상태코드 200 아님")
    else :
        print("스토어 개설 실패")

    # 스토어 저장하기
    url = 'https://rc2.wadiz.kr/web/apip/store/studio/projects/709/save-temporary-by-admin'
    
    if server == 'rc' :
        featured_imageKey = "2022/12/02/acb4d665-7ed5-4dbc-a91f-8eeef71ed5c0.jpg" # 대표이미지 
        maker_imageKey =  "2024/04/11/7c5a523d-31e1-436d-b78e-dd73aa3863da.jpg" # 메이커 이미지
        maker_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc/2024/04/11/7c5a523d-31e1-436d-b78e-dd73aa3863da.jpg" # 메이커 이미지   
        story_imageKey = "2022/05/24/b0410f71-043d-4d17-ab1e-c403d425e4c8.jpg" # 스토리 이미지
        story_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc/2024/04/11/c8453521-9de7-46aa-aa73-f9613f48e2f4.png" # 스토리 이미지
        
        attachmentKey = '3e6b6aac-3947-4a52-8d76-6e01e8fcab40' # 업로드 파일
        
    elif server == 'rc2':
        featured_imageKey = "2022/12/02/acb4d665-7ed5-4dbc-a91f-8eeef71ed5c0.jpg"  # 대표이미지 
        maker_imageKey = "2024/04/11/92c95555-0d43-42d2-96f0-a156b3d99723.jpg"  # 메이커 이미지
        maker_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc2/2024/04/11/92c95555-0d43-42d2-96f0-a156b3d99723.jpg"  # 메이커 이미지
        story_imageKey = "2022/05/24/b0410f71-043d-4d17-ab1e-c403d425e4c8.jpg" # 스토리 이미지
        story_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc2/2024/04/11/a14a7418-ad51-4d51-babc-8caddf5dcccd.png" # 스토리 이미지
        
        attachmentKey = 'a8de2574-1f92-4dbd-b028-9b131586a6bd' # 업로드 파일
                
    elif server == 'rc3':
        featured_imageKey = "2022/12/02/acb4d665-7ed5-4dbc-a91f-8eeef71ed5c0.jpg"  # 대표이미지 
        maker_imageKey = "2021/10/19/d685a513-d4c2-40db-9636-94c5d75089f3.jpg"  # 메이커 이미지
        maker_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc3/2021/10/19/d685a513-d4c2-40db-9636-94c5d75089f3.jpg"  # 메이커 이미지
        story_imageKey = "2022/05/24/b0410f71-043d-4d17-ab1e-c403d425e4c8.jpg" # 스토리 이미지
        story_url = "https://s3.ap-northeast-2.amazonaws.com/wadiz.store.rc3/2021/10/19/b9f273d4-63b3-4e66-8d07-235158a037ee.jpg" # 스토리 이미지
        
        attachmentKey = '518d99b8-05b6-41d3-9c41-52be377d8673' # 업로드 파일
    
    # 스토어 내용 입력
    url = f"{host}/apip/store/studio/projects/{projectNo}/submit-by-admin"
    
    if WA_Delivery_type == False : 
        wa_delivery = {"serviceType": "WA_DELIVERY",
            "isRequested": WA_Delivery_type}
    else :
        wa_delivery = {
            "serviceType": "WA_DELIVERY",
            "waDeliveryStorageType": WA_Delivery_type,
            "isRequested": True}
        

    data = {
        "project": {
            "title": str(projectNo)+title,
            "categories": [{
                "code": categoryCode,
                "isPrimary": "true"
            }, {
                "code": subcategoryCode,
                "isPrimary": "false"
            }],
            "tags": ["Test"],
            "featuredImage": {
                "imageKey": featured_imageKey
            }
        },
        "maker": {
            "contact": {
                "email": wadiz_Id,
                "phoneNumber": wadiz_phonenumber
            },
            "name": "hanna.lee",
            "profileImage": {
                "imageKey": maker_imageKey,
                "url": maker_url
            }
        },
        "serviceApplications": [
            wa_delivery
        ],
        "content": {
            "introType": "IMAGE",
            "introImages": [{
            "imageKey": story_imageKey,
            "url": story_url
            }],
            "story": "<h3>안녕하세요. 스토리 작성을 시작한 메이커님을 환영해요!</h3>"
        },
        "setting": {
            "productDisplayType": "LIST"
        },
        "products": [{
            "productNo": 1141,
            "name": "1번 스토어 상품",
            "price": 5000,
            "isSignature": True,
            "isVisible": True,
            "isShippingRequired": True,
            "hasOptions": False,
            "isOptionsReset": False,
            "stockQty": 10
        }, {
            "productNo": 1142,
            "name": "2번 스토어 상품",
            "price": 6000,
            "isSignature": False,
            "isVisible": True,
            "isShippingRequired": True,
            "hasOptions": True,
            "optionSettings": [{
                "optionName": "색상",
                "optionValue": "블랙,화이트,레드"
            }],
            "optionNames": ["색상"],
            "optionCombinations": [{
                "optionCombinationNo": 2578,
                "optionValues": ["블랙"],
                "isVisible": True,
                "stockQty": 100
            }, {
                "optionCombinationNo": 2579,
                "optionValues": ["화이트"],
                "isVisible": True,
                "stockQty": 100
            }, {
                "optionCombinationNo": 2580,
                "optionValues": ["레드"],
                "isVisible": True,
                "stockQty": 100
            }],
            "isOptionsReset": False,
            "stockQty": 300
        }],
        "shippingInfo": {
            "shippingCharge": 0,
            "shippingWithinDays": 1
        },
        "claimAsGuide": {
            "returnAddress": {
                "addressLine1": "경기 성남시 분당구 판교로 242",
                "addressLine2": "4층 와디즈",
                "zipCode": "13487"
            },
            "oneWayShippingCharge": 0
        },
        "productInfoNotices": [{
            "productInfoNoticeNo": 914,
            "categoryCode": "RPC37",
            "descriptions": [{
                "item": {
                    "itemNo": 336,
                    "name": "품명 및 모델명"
                },
                "description": "TN-5000 보풀제거기"
            }, {
                "item": {
                    "itemNo": 337,
                    "name": "법에 의한 인증・허가 등을 받았음을 확인할 수 있는 경우 그에 대한 사항"
                },
                "description": "[방송통신기자재]적합등록_ R-R-tbo-TN-5000, [전기용품]안전확인_YU102629-21003A"
            }, {
                "item": {
                    "itemNo": 338,
                    "name": "제조국 또는 원산지"
                },
                "description": "대한민국"
            }, {
                "item": {
                    "itemNo": 339,
                    "name": "제조자, 수입품의 경우 수입자를 함께 표기"
                },
                "description": "와디즈 QA 테스트 입니다"
            }, {
                "item": {
                    "itemNo": 340,
                    "name": "A/S 책임자와 전화번호 또는 소비자상담 관련 전화번호",
                    "guide": "담당자 이름 표기가 어려울 경우, 업체명 입력"
                },
                "description": "얍얍얍얍얍얍"
            }]
        }],
        "makerBusinessInfo": {
            "representative": {
                "name": wadiz_name,
                "email": wadiz_Id,
                "phoneNumber": wadiz_phonenumber,
                "dateOfBirth": "1976-01-01"
            },
            "settlementInfo": {
                "bankAccount": {
                    "bankCode": "071",
                    "bankName": "우체국",
                    "accountNumber": "01228602013794",
                    "accountHolder": "테스트"
                },
                "taxInvoiceRecipientEmail": "testQA@wadiz.kr"
            },
            "businessRegistrationType": "SOLE_PROPRIETOR",
            "businessName": businessName,
            "businessRegistrationNumber": businessNumber,
            "businessLocation": {
                "addressLine1": "경기 성남시 분당구 판교로 242",
                "addressLine2": "4층 와디즈",
                "zipCode": "13487"
            },
            "mailOrderBusinessReportNumber": "2021-성남분당-1234",
            "documents": [{
                "type": "MAIL_ORDER_BUSINESS_REPORT",
                "file": {
                    "attachmentKey": attachmentKey
                }
            }, {
                "type": "CERTIFICATE_OF_BUSINESS_REGISTRATION",
                "file": {
                    "attachmentKey": attachmentKey
                }
            }, {
                "type": "COPY_OF_BANKBOOK",
                "file": {
                    "attachmentKey": attachmentKey
                }
            }]
        }
    }
    # 제출하기
    response = requests.post(url, json=data, cookies=session_info_adstore) 
        
    if response.status_code == 200:
        print(">> 스토어 내용 입력 완료")
    else :	
        print("스토어 내용 입력 실패")
        print(response.text)
        sys.exit() # 로그인 실패하면 종료...
        

    # ============ 10. 어드민 심사하기 ============ #
    # 어드민 로그인
    login_url_adm = f"https://{server}adm.wadiz.kr/j_spring_security_check"
    login_data_admin = {
        'j_username': ADwadiz_Id,
        'j_password': ADwadiz_PW
    }

    # 세션 생성
    with requests.Session() as session:
        # 로그인 요청
        login_response = session.post(login_url_adm, data=login_data_admin)

        # 로그인이 성공한 경우
        if login_response.status_code == 200:
            print(">> 어드민 로그인 성공(스토어)")
            
            # 구분 IN으로 변경
            url = f"{host_adm}/apip/store/admin/project-managements/{projectNo}/progress-type/IN"
            response = session.post(url)
            if response.status_code == 200:
                    print("구분변경")

            # 심사 중으로 변경
            url = f"{host_adm}/apip/store/admin/project-managements/{projectNo}/events/BEGINNING_SCREENING"
            response = session.put(url)
            
            # 심사 승인 상태로 변경
            url = f"{host_adm}/apip/store/admin/project-managements/{projectNo}/events/APPROVE"
            response = session.put(url)
            
            if WA_Delivery_type == False:
                print(">> 스토어 심사 완료")
            
            else:
                url = f"{host_adm}/apip/store/admin/projects/{projectNo}/wa-delivery/actions/BEGINNING_SCREENING"
                response = session.put(url)
                
                url = f"{host_adm}/apip/store/admin/projects/{projectNo}/wa-delivery/actions/APPROVE"
                response = session.put(url)
                print(">> 와배송 심사 완료")
            
        else:
            print("Admin 로그인 실패")
            

    # 서비스 이용 동의
    url = f"{host}/apip/store/studio/projects/{projectNo}/terms-agreements/TERMS_OF_SERVICE"
    response = requests.post(url, cookies=session_info)
    

    # ====스토어 오픈하기=====
    
    # # 와배송 아닌경우 바로 오픈
    # if WA_Delivery_type == False:
    # 	url = f"{host}/apip/store/studio/projects/{projectNo}/open"
    # 	response = requests.post(url, cookies=session_info) 
    # 	print(">> 스토어 오픈 완료")
    
    # # 와배송인경우 수동 오픈
    # else :
    # 	print(">> 와배송 스토어 수동 오픈 필요")
